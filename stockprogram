import sqlite3                                 # python 3
import random                                  # python 3
from tkinter import *                          # python 3
import tkinter as tk                           # python 3
from tkinter import font  as tkfont            # python 3
from tkinter.filedialog import askopenfilename # python 3
from math import *                             # python 3
from PIL import ImageGrab                      # python 3
import numpy as np                             # python 3
import cv2                                     # python 3
from PIL import ImageGrab                      # python 3

data1 = sqlite3.connect("data.db")             # python 3
cursor = data1.cursor()                        # python 3
data2 = sqlite3.connect("giris.db")            # python 3
cursor2 = data2.cursor()                       # python 3
#import Tkinter as tk                          # python 2
#import tkFont as tkfont                       # python 2


def tabloolustur():
    cursor.execute("CREATE TABLE IF NOT EXISTS data(urunno INT, urunadi TEXT, urunsayisi INT)")

def tabloolusturgiris():
    cursor2.execute("CREATE TABLE IF NOT EXISTS giris(kullaniciadi TEXT, sifre INT)")

def degerekleme():
    cursor.execute("INSERT INTO bank VALUES('{}','{}','{}')".format(urunno, urunadi, urunsayisi,))

def degereklemegiris():
    cursor2.execute("INSERT INTO giris VALUES('{}','{}','{}')".format(kullaniciadi, sifre))
    

        #************ Open File Dialog System **************
def ofd():
    ftypes = [('htm file',"*.htm")]
    ttl  = "Open File"
    dir1 = 'C:\\'
    app.fileName = askopenfilename(filetypes = ftypes, initialdir = dir1, title = ttl)
    print (app.fileName)

        #***************************************************

class PhernSoftware(tk.Tk):

    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        self.title_font = tkfont.Font(family='Helvetica', size=12, weight="bold", slant="italic")
        self.geometry("500x500")
        self.title("PhernSoftware")

        #********************Add Menu***********************
        menu= Menu(self)  
        self.config(menu = menu)
        subMenu= Menu(menu)
        menu.add_cascade(label = "Hakkinda",menu = subMenu)
        subMenu.add_command(label = "Versiyon",command= "UpdatePage" )
        
        #***************************************************
        
        # the container is where we'll stack a bunch of frames
        # on top of each other, then the one we want visible
        # will be raised above the others
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)
        self.frames = {}
        for F in (StartPage, PageOne, PageTwo, PageThree, EndPage, UpdatePage):
            page_name = F.__name__
            frame = F(parent=container, controller=self)
            self.frames[page_name] = frame

            # put all of the pages in the same location;
            # the one on the top of the stacking order
            # will be the one that is visible.
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame("StartPage")

    def show_frame(self, page_name):
        '''Show a frame for the given page name'''
        frame = self.frames[page_name]
        frame.tkraise()
        #************ Pages *********************************

class StartPage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="Anasayfa", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)
        button1 = tk.Button(self, text="Birinci Sayafaya Git",
                            command=lambda: controller.show_frame("PageOne"))
        button2 = tk.Button(self, text="Ikinci Sayfaya Git",
                            command=lambda: controller.show_frame("PageTwo"))
        button3 = tk.Button(self, text="Ekran Uygulamalari",
                            command=lambda: controller.show_frame("PageThree"))
        button4 = tk.Button(self, text="Hesap Makinesi",
                            command=lambda: controller.show_frame("EndPage"))
        button5 = tk.Button(self, text="UpdateSayfasi",
                            command=lambda: controller.show_frame("UpdatePage"))
        button1.pack()
        button2.pack()
        button3.pack()
        button4.pack()
        button5.pack()
        

class PageOne(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="Birinci sayfadasiniz.", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)
        button = tk.Button(self, text="Anasayfaya Dönün",
                           command=lambda: controller.show_frame("StartPage"))
        button.pack()


class PageTwo(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="Ikinci sayfadasiniz", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)
        button = tk.Button(self, text="Anasayfaya Dönün",
                           command=lambda: controller.show_frame("StartPage"))
        button1 = tk.Button(self, text="Dosya Aç",
                            command= ofd)
        button.pack()
        button1.pack()


class PageThree(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="Ekran Görüntüsü, Videosu ve daha fazla...", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)
        button = tk.Button(self, text="Anasayfaya Dönün",
                           command=lambda: controller.show_frame("StartPage"))
        def ekrangoruntusu():
            try:
                sDosyaAdi= "ekrangoruntusu"
                resim= ImageGrab.grab()
                adi=sDosyaAdi+".jpg"
                resim.save(adi,'JPEG')
            except:
                print ("Hata olustu")
        button1 = tk.Button(self, text="Ekran Görüntüsü Al",
                            command= ekrangoruntusu)

        def ekranvideosual():
            fourcc = cv2.VideoWriter_fourcc(*'XVID')
            out = cv2.VideoWriter("output.avi",fourcc,8, (1366, 768))

            while True:
                img = ImageGrab.grab()
                img_np = np.array(img)

                frame = cv2.cvtColor(img_np, cv2.COLOR_BGR2RGB)

                cv2.imshow("Screen",frame)
                out.write(frame)

                if cv2.waitKey(1) == 27:
                    break
            out.release()
            cv2.destroyAllWindows()
        button2 = tk.Button(self, text="Ekran Videosu Çek",
                            command= ekranvideosual)
            
        button.pack()
        button1.pack()
        button2.pack()


class EndPage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="Hesap Makinesi", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)
        button = tk.Button(self, text="Anasayfaya Dönün",
                           command=lambda: controller.show_frame("StartPage"))
        button.pack()
        yazi=""
        ekran = tk.Label(self,textvariable=yazi,relief=SUNKEN,bg="#ffffff",height=2,anchor=E)
        ekran.pack(side="top", expand=YES, fill=X, padx=12, pady=10)
        def yaz(x):
            global yazi
            yazi = yazi + x
            ekran.config(text=yazi)
        def hesapla():
            global yazi
            a= eval(yazi)
            ekran.config(text=a)
            yazi=""
        def temizle():
            global yazi
            ekran.config(text="")
            yazi=""
        def sil():
            global yazi
            yazi=yazi[0:-1]
            ekran.config(text=yazi)
        cerceveana1= tk.Frame(self)
        cerceveana1.pack(expand=YES, fill=X)

        cerceveana11=Frame(cerceveana1)
        cerceveana11.pack(side=TOP, expand=YES, fill=X)

        cerceveana2= Frame(self)
        cerceveana2.pack()

        cerceveana21=Frame(cerceveana2)
        cerceveana21.grid(row=0, column=0)

        cerceveana22=Frame(cerceveana2)
        cerceveana22.grid(row=0, column=1)

        cerceveana23=Frame(cerceveana2)
        cerceveana23.grid(row=1, column=0)

        cerceveana24=Frame(cerceveana2)
        cerceveana24.grid(row=1, column=1)

        cerceve4=Frame(cerceveana21)
        cerceve4.pack(padx=12)

        cerceve2=Frame(cerceveana22)
        cerceve2.pack(padx=12)

        c=0
        d=0
        e=0
        for i in (1,2,3,4,5,6,7,8,9):
            k=i%3
            if k==1:
                Button(cerceve4,text=i,fg="white",bg="blue",font=controller.title_font,height=2, width=6, command=(lambda i=i: yaz(str(i)))).grid(row=c, column=1)
                c=c+1
            if k==2:
                Button(cerceve4,text=i,fg="white",bg="blue",font=controller.title_font,height=2, width=6, command=(lambda i=i: yaz(str(i)))).grid(row=d, column=2)
                d=d+1
            if k==0:
                Button(cerceve4,text=i,fg="white",bg="blue",font=controller.title_font,height=2, width=6, command=(lambda i=i: yaz(str(i)))).grid(row=e, column=3)
                e=e+1
        Button(cerceve2, text="X",fg="yellow",bg="red", font=controller.title_font, height=2, width=6, command=(lambda i=i: yaz("*"))).grid(row=0, column=4)
        Button(cerceve2, text="/",fg="yellow",bg="red", font=controller.title_font, height=2, width=6, command=(lambda i=i: yaz("/"))).grid(row=1, column=4)
        Button(cerceve2, text="=", fg="yellow",bg="red",font=controller.title_font, height=2, width=6, command=hesapla).grid(row=2, column=4)
        Button(cerceve4, text="(",fg="white",bg="blue", font=controller.title_font, height=2, width=6, command=(lambda i=i: yaz("("))).grid(row=3, column=1)
        Button(cerceve4, text="0",fg="white",bg="blue", font=controller.title_font, height=2, width=6, command=(lambda i=i: yaz("0"))).grid(row=3, column=2)
        Button(cerceve4, text=")",fg="white",bg="blue", font=controller.title_font, height=2, width=6, command=(lambda i=i: yaz(")"))).grid(row=3, column=3)
        Button(cerceve2, text="AC",fg="yellow",bg="red", font=controller.title_font, height=2, width=6, command=temizle).grid(row=3, column=4)
        Button(cerceve2, text="+",fg="yellow",bg="red", font=controller.title_font, height=2, width=6, command=(lambda i=i: yaz("+"))).grid(row=0, column=5)
        Button(cerceve2, text="-",fg="yellow",bg="red", font=controller.title_font, height=2, width=6, command=(lambda i=i: yaz("-"))).grid(row=1, column=5)
        Button(cerceve2, text=".",fg="yellow",bg="red",font=controller.title_font, height=2, width=6, command=(lambda i=i: yaz("."))).grid(row=2, column=5)
        Button(cerceve2, text="C", fg="yellow",bg="red", font=controller.title_font, height=2, width=6, command=sil).grid(row=3, column=5)

class UpdatePage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="Versiyon,Güncellestirme ve daha fazlasi...", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)
        
    
        #**************************************************

        
if __name__ == "__main__":
    app = PhernSoftware()
    app.mainloop()

